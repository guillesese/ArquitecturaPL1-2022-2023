package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
    int errorCounter = 0;
:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaracion de terminales (Ejemplo)


//OPERADORES
terminal Token MINUS;
terminal Token MULT;
terminal Token GT;
terminal Token NEQ;
terminal Token AND;
terminal Token ASSIGN;
terminal Token DOT;
 
//DELIMITADORES
terminal Token COMILLAS;
terminal Token APARENTESIS;
terminal Token CPARENTESIS;
terminal Token COMA;
terminal Token PUNTOYCOMA;
terminal Token DOSPUNTOS;

//PALABRAS RESERVADAS
terminal Token BEGIN;
terminal Token BOOLEAN;
terminal Token CONSTANT;
terminal Token ELSE;
terminal Token END;
terminal Token FALSE;
terminal Token FUNCTION;
terminal Token IF;
terminal Token INTEGER; 
terminal Token IS;
terminal Token LOOP;
terminal Token OUT;
terminal Token PROCEDURE;
terminal Token PUT_LINE;
terminal Token RECORD;
terminal Token RETURN;
terminal Token TRUE;
terminal Token THEN;
terminal Token TYPE;
terminal Token WHILE;

//palabras clave
terminal Token CADENA;
terminal Token IDENTIFICADOR;
terminal Token NUMERO;

// Declaracion de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;
//
non terminal Cabecera, Cuerpo;
non terminal Declaraciones, Sentencias;
non terminal LDeclaraciones,CDeclaraciones, LSubprogramas;
non terminal Constantes, TiposEstructurados, VariablesGlobales;
non terminal LConstantes, Constante; 
non terminal Valor, Variable, Tipo, TipoPrimitivo;
non terminal LTiposEstructurados, TipoEstructurado, LCamposReg;
non terminal LVariablesGlobales, VariableGlobal;
non terminal Numero, ValorBooleano;
non terminal Subprograma;
non terminal LSentencias, Sentencia;
non terminal Procedimiento, Funcion;
non terminal CabProcedimiento, CabFuncion;
non terminal Parametros;

// Declaracion de relaciones de precedencia
precedence left DOT,APARENTESIS,CPARENTESIS;
precedence left MULT; 
precedence left MINUS;
precedence left GT; 
precedence left NEQ;
precedence left AND;
// ...

// DeclaraciÃ³n de reglas de produccion
start with program;

program ::= 
	{: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 	
	:}
  axiom:ax
	{:   
		if(errorCounter > 0) syntaxErrorManager.syntaxInfo("Numero de errores: "+errorCounter);	
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
	:};

axiom          ::= Cabecera Cuerpo; 
Cabecera       ::= PROCEDURE IDENTIFICADOR APARENTESIS CPARENTESIS IS;
Cabecera       ::= PROCEDURE error{:syntaxErrorManager.syntaxInfo("Se debe especificar un identificador ");errorCounter++;:} APARENTESIS CPARENTESIS IS 
			     | PROCEDURE IDENTIFICADOR error{:syntaxErrorManager.syntaxInfo("Se debe especificar un ( ");errorCounter++;:} CPARENTESIS IS
			     | PROCEDURE IDENTIFICADOR APARENTESIS error{:syntaxErrorManager.syntaxInfo("Se debe especificar un ) ");errorCounter++;:} IS
			     | PROCEDURE IDENTIFICADOR APARENTESIS CPARENTESIS error{:syntaxErrorManager.syntaxInfo("Se debe especificar is (cabecera) ");errorCounter++;:};
			     
Cuerpo         ::= Declaraciones BEGIN Sentencias END IDENTIFICADOR PUNTOYCOMA;
Cuerpo         ::= Declaraciones error{:syntaxErrorManager.syntaxInfo("Se debe especificar begin ");errorCounter++;:} Sentencias END IDENTIFICADOR PUNTOYCOMA
                 | Declaraciones BEGIN Sentencias error{:syntaxErrorManager.syntaxInfo("Se debe especificar end ");errorCounter++;:} IDENTIFICADOR PUNTOYCOMA
                 | Declaraciones BEGIN Sentencias END error{:syntaxErrorManager.syntaxInfo("Se debe especificar un identificador ");errorCounter++;:} PUNTOYCOMA
                 | Declaraciones BEGIN Sentencias END IDENTIFICADOR error{:syntaxErrorManager.syntaxInfo("Se debe especificar ; ");errorCounter++;:};

//------------------------------------- ZONA DE DECLARACIONES ----------------------------------------
Declaraciones  ::= LDeclaraciones LSubprogramas;
//LDeclaraciones ::= CDeclaraciones | ;
//CDeclaraciones ::= Constantes TiposEstructurados VariablesGlobales;
LDeclaraciones ::= Constantes TiposEstructurados VariablesGlobales;

//------------------------------ ZONA DE DECLARACIONES. CONSTANTES -----------------------------------
Constantes     ::= Constantes Constante | ; 
Constante      ::= IDENTIFICADOR DOSPUNTOS CONSTANT ASSIGN Valor PUNTOYCOMA; 
Constante      ::= IDENTIFICADOR error{:syntaxErrorManager.syntaxInfo("Se debe especificar : ");errorCounter++;:} CONSTANT ASSIGN Valor PUNTOYCOMA
				|  IDENTIFICADOR DOSPUNTOS error{:syntaxErrorManager.syntaxInfo("Se debe especificar constant  ");errorCounter++;:} ASSIGN Valor PUNTOYCOMA
				|  IDENTIFICADOR DOSPUNTOS CONSTANT error{:syntaxErrorManager.syntaxInfo("Se debe especificar := ");errorCounter++;:} Valor PUNTOYCOMA
				|  IDENTIFICADOR DOSPUNTOS CONSTANT ASSIGN Valor error{:syntaxErrorManager.syntaxInfo("Se debe especificar ; ");errorCounter++;:};

//----------------------------- ZONA DE DECLARACIONES. TIPOS ESTRUCTURADOS ---------------------------
TiposEstructurados ::= TiposEstructurados TipoEstructurado | ;
TipoEstructurado    ::= TYPE IDENTIFICADOR IS RECORD LCamposReg END RECORD PUNTOYCOMA;
TipoEstructurado    ::= TYPE error{:syntaxErrorManager.syntaxInfo("Se debe especificar un identificador ");errorCounter++;:} IS RECORD LCamposReg END RECORD PUNTOYCOMA
					  | TYPE IDENTIFICADOR error{:syntaxErrorManager.syntaxInfo("Se debe especificar is ");errorCounter++;:} RECORD LCamposReg END RECORD PUNTOYCOMA
					  | TYPE IDENTIFICADOR IS error{:syntaxErrorManager.syntaxInfo("Se debe especificar record ");errorCounter++;:} LCamposReg END RECORD PUNTOYCOMA
					  | TYPE IDENTIFICADOR IS RECORD LCamposReg error{:syntaxErrorManager.syntaxInfo("Se debe especificar end ");errorCounter++;:} RECORD PUNTOYCOMA
					  | TYPE IDENTIFICADOR IS RECORD LCamposReg END error{:syntaxErrorManager.syntaxInfo("Se debe especificar record ");errorCounter++;:} PUNTOYCOMA
					  | TYPE IDENTIFICADOR IS RECORD LCamposReg END RECORD error{:syntaxErrorManager.syntaxInfo("Se debe especificar ; ");errorCounter++;:};
					  
LCamposReg          ::= LCamposReg Variable PUNTOYCOMA | Variable PUNTOYCOMA;

//----------------------------- ZONA DE DECLARACIONES. VARIABLES GLOBALES ---------------------------
VariablesGlobales   ::= VariablesGlobales VariableGlobal | ;  
VariableGlobal      ::= IDENTIFICADOR COMA Variable PUNTOYCOMA | Variable PUNTOYCOMA; 
//---------------------------------- DEFINICION DE VALOR --------------------------------------------
Valor         ::= Numero | ValorBooleano; 
Numero        ::= NUMERO;
ValorBooleano ::= TRUE | FALSE; 

//---------------------------------- DEFINICION DE VARIABLE  --------------------------------------------
Variable      ::= IDENTIFICADOR DOSPUNTOS Tipo;
Tipo          ::= IDENTIFICADOR | TipoPrimitivo;
TipoPrimitivo ::= INTEGER | BOOLEAN;

//---------------------------------- DEFINICION DE SUBPROGRAMAS  --------------------------------------------
LSubprogramas  ::= LSubprogramas Subprograma | ;
Subprograma    ::= Procedimiento | Funcion;
Procedimiento  ::= CabProcedimiento Cuerpo; 
Funcion        ::= CabFuncion Cuerpo;

//---------------------------------- SUBPROGRAMAS. PROCEDIMIENTOS --------------------------------------------
CabProcedimiento ::= PROCEDURE IDENTIFICADOR APARENTESIS Parametros CPARENTESIS IS;
//CabProcedimiento ::= PROCEDURE error{:syntaxErrorManager.syntaxInfo("Se debe especificar un identificador ");errorCounter++;:} APARENTESIS Parametros CPARENTESIS IS
//				   | PROCEDURE IDENTIFICADOR error{:syntaxErrorManager.syntaxInfo("Se debe especificar un ( ");errorCounter++;:} Parametros CPARENTESIS IS
//				   | PROCEDURE IDENTIFICADOR APARENTESIS Parametros error{:syntaxErrorManager.syntaxInfo("Se debe especificar un identificador ");errorCounter++;:} IS
//				   | PROCEDURE IDENTIFICADOR APARENTESIS Parametros CPARENTESIS error{:syntaxErrorManager.syntaxInfo("Se debe especificar IS");errorCounter++;:}; 

//---------------------------------- SUBPROGRAMAS. FUNCIONES ------------------------------------------------
CabFuncion    ::= FUNCTION IDENTIFICADOR APARENTESIS Parametros CPARENTESIS RETURN TipoPrimitivo IS;

//----------------------------------- ZONA DE SENTENCIAS ---------------------------------------------------
Sentencias    ::= LSentencias Sentencia | ;
Sentencia     ::= ; 