package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
    int errorCounter = 0;
:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaracion de terminales (Ejemplo)


//OPERADORES
terminal Token MINUS;
terminal Token MULT;
terminal Token GT;
terminal Token NEQ;
terminal Token AND;
terminal Token ASSIGN;
terminal Token DOT;
 
//DELIMITADORES
terminal Token COMILLAS;
terminal Token APARENTESIS;
terminal Token CPARENTESIS;
terminal Token COMA;
terminal Token PUNTOYCOMA;
terminal Token DOSPUNTOS;

//PALABRAS RESERVADAS
terminal Token BEGIN;
terminal Token BOOLEAN;
terminal Token CONSTANT;
terminal Token ELSE;
terminal Token END;
terminal Token FALSE;
terminal Token FUNCTION;
terminal Token IF;
terminal Token INTEGER; 
terminal Token IS;
terminal Token LOOP;
terminal Token OUT;
terminal Token PROCEDURE;
terminal Token PUT_LINE;
terminal Token RECORD;
terminal Token RETURN;
terminal Token TRUE;
terminal Token THEN;
terminal Token TYPE;
terminal Token WHILE;

//palabras clave
terminal Token CADENA;
terminal Token IDENTIFICADOR;
terminal Token NUMERO;

// Declaracion de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;
//
non terminal Cabecera, Cuerpo;
non terminal Declaraciones, Sentencias;
non terminal Declaracion, Declara, DDeclaraciones; 
non terminal LDeclaraciones, LSubprogramas;
non terminal vRegistro;
non terminal Constante; 
non terminal Valor, Variable, Tipo, TipoPrimitivo;
non terminal TipoEstructurado, LCamposReg;
non terminal Numero;
non terminal Subprograma;
non terminal LConstantes,DConstantes,LRestoDeclaraciones;
non terminal LSentencias, Sentencia;
non terminal Procedimiento, Funcion;
non terminal CabProcedimiento, CabFuncion;
non terminal Parametros, LParametros, Parametro;
non terminal Modificador;
non terminal SentenciaIF,SentenciaELSE;
non terminal Condicion;
non terminal ImprimirPantalla;
non terminal Referencia,Relacion,RelacionAND;
non terminal Expresion;
non terminal SentenciaWhile, SentenciaAsignacion, Invocacion,Invocacion2,Return;
non terminal Texto,LExpresion,ExpresionReturn, pActuales;

non terminal CuerpoFunc,CuerpoProc,SentenciasRet,LSentenciasRet,SentenciaRet;

// Declaracion de relaciones de precedencia
precedence left DOT,APARENTESIS,CPARENTESIS;
precedence left MULT; 
precedence left MINUS;
precedence left GT; 
precedence left NEQ;
precedence left AND;
// Tengo que controlar el orden si o si 
precedence left Constante,TipoEstructurado,Variable,Subprograma;

// Declaración de reglas de produccion
start with program;

program ::= 
	{: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 	
	:}
  axiom:ax
	{:   
		if(errorCounter > 0) syntaxErrorManager.syntaxInfo("Numero de errores: "+errorCounter);	
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
	:};
	
axiom      ::= Cabecera Cuerpo;

//------------------------------------------------------- ZONA DE DEFINICION DE CABECERA --------------------------------------------- 
Cabecera   ::= PROCEDURE IDENTIFICADOR APARENTESIS CPARENTESIS IS;
Cabecera   ::= PROCEDURE error{:syntaxErrorManager.syntaxInfo("Se debe especificar un identificador ");errorCounter++;:} APARENTESIS CPARENTESIS IS 
			 | PROCEDURE IDENTIFICADOR error{:syntaxErrorManager.syntaxInfo("Se debe especificar un ( ");errorCounter++;:} CPARENTESIS IS
			 | PROCEDURE IDENTIFICADOR APARENTESIS error{:syntaxErrorManager.syntaxInfo("Se debe especificar un ) ");errorCounter++;:} IS
			 | PROCEDURE IDENTIFICADOR APARENTESIS CPARENTESIS error{:syntaxErrorManager.syntaxInfo("Se debe especificar is (cabecera) ");errorCounter++;:};

// Cuerpo principal del programa. ¡No es totalmente igual a los de los subprogramas!			     
Cuerpo ::= Declaraciones BEGIN Sentencias END IDENTIFICADOR PUNTOYCOMA;
Cuerpo ::= Declaraciones error{:syntaxErrorManager.syntaxInfo("Se debe especificar begin ");errorCounter++;:} Sentencias END IDENTIFICADOR PUNTOYCOMA
           	   | Declaraciones BEGIN Sentencias error{:syntaxErrorManager.syntaxInfo("Se debe especificar end ");errorCounter++;:} IDENTIFICADOR PUNTOYCOMA
               | Declaraciones BEGIN Sentencias END error{:syntaxErrorManager.syntaxInfo("Se debe especificar un identificador ");errorCounter++;:} PUNTOYCOMA
               | Declaraciones BEGIN Sentencias END IDENTIFICADOR error{:syntaxErrorManager.syntaxInfo("Se debe especificar ; ");errorCounter++;:};

Declaraciones    ::= LConstantes LRestoDeclaraciones; 
LRestoDeclaraciones ::= LDeclaraciones LSubprogramas;

LConstantes      ::= DConstantes | ;
DConstantes      ::= DConstantes Constante | Constante;

LDeclaraciones   ::= DDeclaraciones |; 
DDeclaraciones   ::= DDeclaraciones Declaracion | Declaracion; 

Declaracion      ::= IDENTIFICADOR Variable PUNTOYCOMA | TipoEstructurado PUNTOYCOMA;

Constante        ::= DOSPUNTOS CONSTANT ASSIGN Valor;
Constante		 ::= DOSPUNTOS error{:syntaxErrorManager.syntaxInfo("Se debe especificar constant ");errorCounter++;:} ASSIGN Valor 
				  |  DOSPUNTOS CONSTANT error{:syntaxErrorManager.syntaxInfo("Se debe especificar := ");errorCounter++;:} Valor;    
			
Variable         ::= DOSPUNTOS Tipo | COMA IDENTIFICADOR Variable;

Valor            ::= Numero | TRUE | FALSE
				   | error{:syntaxErrorManager.syntaxInfo("Se debe especificar Numero, True o False ");errorCounter++;:};
				
Numero           ::= NUMERO; 

TipoEstructurado ::= TYPE IDENTIFICADOR IS RECORD LCamposReg END RECORD;
TipoEstructurado ::= TYPE error{:syntaxErrorManager.syntaxInfo("Se debe especificar identificador ");errorCounter++;:} IS RECORD LCamposReg END RECORD
				  |  TYPE IDENTIFICADOR error{:syntaxErrorManager.syntaxInfo("Se debe especificar is ");errorCounter++;:} RECORD LCamposReg END RECORD
				  |  TYPE IDENTIFICADOR IS error{:syntaxErrorManager.syntaxInfo("Se debe especificar record ");errorCounter++;:} LCamposReg END RECORD 
				  |  TYPE IDENTIFICADOR IS RECORD LCamposReg error{:syntaxErrorManager.syntaxInfo("Se debe especificar end ");errorCounter++;:} RECORD
				  |  TYPE IDENTIFICADOR IS RECORD LCamposReg END error{:syntaxErrorManager.syntaxInfo("Se debe especificar record ");errorCounter++;:};
				  
vRegistro        ::= IDENTIFICADOR DOSPUNTOS Tipo PUNTOYCOMA
				  |  error{:syntaxErrorManager.syntaxInfo("Se debe definir un campo de registros ");errorCounter++;:};
					
LCamposReg       ::= LCamposReg vRegistro | vRegistro ;
Tipo             ::= TipoPrimitivo | IDENTIFICADOR;
//				   | error{:syntaxErrorManager.syntaxInfo("Se debe especificar Integer, Boolean o Identificador ");errorCounter++;:};
				   
TipoPrimitivo    ::= INTEGER | BOOLEAN;

//------------------------------------------------------- ZONA DE SUBPROGRAMAS --------------------------------------------- 
                 
LSubprogramas    ::= LSubprogramas Subprograma | ; 
Subprograma      ::= Procedimiento | Funcion;
Procedimiento    ::= CabProcedimiento CuerpoProc; 
Funcion          ::= CabFuncion CuerpoFunc;
 
// Declaro las cabeceras para cada uno. 
CabProcedimiento ::= PROCEDURE IDENTIFICADOR APARENTESIS Parametros CPARENTESIS IS;
CabFuncion       ::= FUNCTION IDENTIFICADOR APARENTESIS Parametros CPARENTESIS RETURN TipoPrimitivo IS;


// La definicion de CuerpoFunc es similar a la de Cuerpo. Tengo que tener en cuenta que los Procedimientos no tienen que tener return y las funciones si. 
CuerpoFunc  ::= LRestoDeclaraciones BEGIN SentenciasRet END IDENTIFICADOR PUNTOYCOMA;
CuerpoProc  ::= LRestoDeclaraciones BEGIN Sentencias END IDENTIFICADOR PUNTOYCOMA;

Parametros       ::= LParametros | ;
LParametros      ::= LParametros PUNTOYCOMA Parametro | Parametro;
Parametro        ::= IDENTIFICADOR DOSPUNTOS Modificador Tipo
				   | IDENTIFICADOR COMA Parametro; 

Modificador      ::= OUT | ;

Sentencias       ::= LSentencias;
LSentencias      ::= LSentencias Sentencia | ;

SentenciasRet    ::= LSentenciasRet;
LSentenciasRet   ::= LSentenciasRet SentenciaRet |;


// para cuerpo de procedimiento 
Sentencia        ::= ImprimirPantalla | SentenciaIF | SentenciaWhile | SentenciaAsignacion | Invocacion ;
// Para cuerpo de funciones
SentenciaRet     ::= Sentencia | Return ;  

ImprimirPantalla ::= PUT_LINE APARENTESIS Texto CPARENTESIS PUNTOYCOMA;
SentenciaIF      ::= IF Condicion THEN Sentencias SentenciaELSE END IF PUNTOYCOMA; 
SentenciaWhile   ::= WHILE Relacion LOOP LSentencias END LOOP PUNTOYCOMA;
SentenciaAsignacion ::= Referencia ASSIGN ExpresionReturn PUNTOYCOMA;
Invocacion       ::= IDENTIFICADOR APARENTESIS pActuales CPARENTESIS PUNTOYCOMA;
Return           ::= RETURN ExpresionReturn PUNTOYCOMA;

Texto            ::= LExpresion | Relacion | CADENA;
Referencia       ::= IDENTIFICADOR | Referencia DOT IDENTIFICADOR;

Condicion        ::= LExpresion | Relacion;
SentenciaELSE    ::= ELSE LSentencias | ;

//Creo este segundo tipo de invocacion sin ; 
Invocacion2		 ::= IDENTIFICADOR APARENTESIS pActuales CPARENTESIS;

ExpresionReturn  ::= LExpresion | Relacion; 
pActuales        ::= pActuales COMA Expresion | Expresion |; 

Expresion        ::= Expresion MINUS Expresion | Expresion MULT Expresion | Numero | APARENTESIS Expresion CPARENTESIS | Referencia | TRUE | FALSE | Invocacion2;
LExpresion       ::= Relacion RelacionAND;
RelacionAND      ::= AND Relacion | AND APARENTESIS LExpresion CPARENTESIS | AND RelacionAND;

Relacion         ::= Expresion GT Expresion | Expresion NEQ Expresion | Expresion; 


